source("/Users/acgerstein/Documents/Postdoc/Research/0CommonFiles/RScript/discAssay1_5f.R")
MAT5.t4 <- readInDir()
maxLik("MAT5.t4", dotedge=3.5, ymax=200, xplots=6, twoCurve=TRUE)
plotMLCurve2Models <- function(data, i, ML, ML2, stand=stand,  ymax=200, dotedge=3, maxDist= 35, percentileHigh = 0.8, label="", both=FALSE){ #
	startX <- which(data[[i]][,1] > dotedge+0.5)[1]#
	stopX <- which(data[[i]][,1] > maxDist - 0.5)[1]#
	data[[i]] <- data[[i]][startX:stopX, 1:2]#
	data[[i]]$x <- data[[i]]$x + stand[i] #
	data[[i]]$distance <- data[[i]]$distance - (dotedge+0.5)#
	xx <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) #
	yy2<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7],xx) #
	plot(data[[i]]$distance, data[[i]]$x, type="p", ylim=c(0, ymax), xaxt="n", yaxt="n", xlab="", ylab="", cex=0.7, col=grey(0.4))#
#	points(exp(xx)- (dotedge+0.5), yy2, type="l", col="red", lwd=2)#
	slope <- max(ML2[[i]]$par[3], ML2[[i]]$par[7])#
	if(slope > 0.001){#
		points(exp(xx), yy2 + min(data[[i]]$x+stand[i]), type="l", col="red", lwd=2)	#
		abline(v=exp(ML2[[i]]$par[2]), col="red", lty=2)#
		abline(v=exp(ML2[[i]]$par[6]), col="red", lty=2)#
		abline(h=ML2[[i]]$par[1] + ML2[[i]]$par[5] +  min(data[[i]]$x+stand[i]), col="red", lty=2)#
#		abline(h=min(ML2[[i]]$par[1], ML2[[i]]$par[5]) +  min(data[[i]]$x+stand[i]), col="red", lty=2)#
		abline(v=exp(xx[which.max(yy2 > yy2[length(yy2)]*0.9)]), col="blue", lwd=2) #
	}#
	if (both){#
		yy<- curve(ML[[i]]$par[1], ML[[i]]$par[2], ML[[i]]$par[3],xx)#
		points(exp(xx), yy + min(data[[i]]$x+stand[i]), type="l", col="green", lwd=2)#
		abline(v=exp(ML[[i]]$par[2]), col="green", lty=2)#
		abline(h=ML[[i]]$par[1], col="green", lty=2)			#
	}#
    axis(2, las=2, at=c(0, ymax*0.25, ymax*0.5, ymax*0.75, ymax), labels=FALSE)#
    axis(1, labels=FALSE, at=c(0, 10, 20, 30, 40))#
    mtext(label, side=3, cex=0.6)#
#
# 	mtext("Distance from edge of disc", outer=FALSE, side=1, line=2.5, cex=1.2)##
#	mtext("Pixel density", outer=FALSE, side=2, line=3, cex=1.2)#
	}#
#exp(xx[which.max(yy2 > yy2[100]*0.9)])
maxLik("MAT5.t4", dotedge=3.5, ymax=200, xplots=6, twoCurve=TRUE)
MAT5.t4.ML2[[1]]
data <- MAT5.t4#
standardLoc <- 0
dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))
stand
range(stand)
range(stand)[2]
seq(0, 3, 100)
for (i in seq(0, 3, 0.1)
}
?append
standMax <- c()#
for (i in seq(0, 3, 0.1){#
	standardLox <- i#
	append(standMax, range(stand)[2])#
	}
standMax <- c()#
for (i in seq(0, 3, 0.1)){#
	standardLox <- i#
	append(standMax, range(stand)[2])#
	}
standMax
standMax <- c()#
for (i in seq(0, 3, 0.1)){#
	standardLox <- i#
	dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
	stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))	#
	append(standMax, range(stand)[2])#
	}
standMax
seq(0, 3, 0.1))
seq(0, 3, 0.1)
standMax <- c()#
for (i in seq(0, 3, 0.1)){#
	standardLoc <- i#
	dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
	stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))	#
	append(standMax, range(stand)[2])#
	}
standMax
i <- 0
dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]}))
stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))
stand
range(stand)[2]
append(standMax, range(stand)[2])
standMax <- append(standMax, range(stand)[2])
standMax
standMax <- c()#
for (i in seq(0, 3, 0.1)){#
	standardLoc <- i#
	dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
	stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))	#
	standMax <- append(standMax, range(stand)[2])#
	}
standMax
min(standMax)
standMax <- c()#
for (i in seq(0, 3, 0.01)){#
	standardLoc <- i#
	dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
	stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))	#
	standMax <- append(standMax, range(stand)[2])#
	}
standMax
min(standMax)
plotRaw("MAT5.t4",  ymax = 275, xmax = 35, dotedge = 3.5)
plotRaw("MAT5.t4",  ymax = 275, xmax = 35, dotedge = 3)
plotRaw("MAT5.t4",  ymax = 325, xmax = 35, dotedge = 3)
plotRaw("MAT5.t4",  ymax = 325, xmax = 35, dotedge = 4)
plotRaw("MAT5.t4",  ymax = 325, xmax = 35, dotedge = 4, standardLoc = 4)
plotRaw("MAT5.t4",  ymax = 400, xmax = 35, dotedge = 4, standardLoc = 4)
maxLik("MAT5.t4", dotedge=4, ymax=200, xplots=6, twoCurve=TRUE, standardLoc = 4)
data <- MAT5.t4#
standardLoc <- 4#
dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
stand <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))
plotMLCurve2Models(MAT5.t4, 1, MAT5.t4.ML, MAT5.t4.ML2, stand = stand, dotedge = 4)
devdev.capabilitiesdev.capabilitiesdev.capabilities
library(lme4)#
library(lmerTest)#
Â cv <-function(x) sd(x,na.rm=TRUE)/mean(x,na.rm=TRUE)#
d <- read.csv("/Users/acgerstein/Documents/Postdoc/Research/TLO/Noise/Noise non-flow/microscopy/motherDaughter/Mother_Daughter_TLO_expression_final.csv", sep=",")#
d <- d[,1:3]#
d$LT <- paste(d$Line, d$Type, sep=".")#
ddn <- split(d, d$LT)#
numcells <- sapply(ddn, function(x) length(x[,1]))#
range(numcells)[1] #50 is the smallest#
#
ddnS <- lapply(ddn, function(x) sample(x$Expression, 50))#
Col <- sapply(as.character(names(ddn)), function(x) strsplit(x, "[.]")[[1]][1])#
Type <- sapply(as.character(names(ddn)), function(x) strsplit(x, "[.]")[[1]][2])#
#
dS <- data.frame(Line = rep(Col, each=50), Type = rep(Type, each=50), Expression=unlist(ddnS))#
dS$Expression[dS$Expression <= 0] <- 0.0001#
dS$Expression <- log(dS$Expression)
is.factor(ds$Type)
is.factor(dS$Type)
library(KernSmooth)
source("/Users/acgerstein/Documents/Postdoc/Research/0CommonFiles/RScript/discAssay2.R")
library(zoo)
F5DY<-readInExisting()
maxLik("F5DY", clearHalo = 28, maxDist = 30, xplots=4)
createDataframe("F5DY", clearHalo = 28)
source("/Users/acgerstein/Documents/Postdoc/Research/0CommonFiles/RScript/discAssay2.R")
createDataframe("F5DY", clearHalo = 28)
findAUC <- function(data, ML, ML2, stand, clearHaloStand, ZOIcor, dotedge = 3.4, maxDist = 35, ymax = 200, standardLoc = 2.5, percentileLow = 0.2,  i){	#
	startX <- which(data[[i]][,1] > dotedge+0.5)[1]#
	stopX <- which(data[[i]][,1] > maxDist - 0.5)[1]#
	data[[i]] <- data[[i]][startX:stopX, 1:2]#
	data[[i]]$x <- data[[i]]$x + stand[i] - clearHaloStand #
	data[[i]]$distance <- data[[i]]$distance - (dotedge+0.5)#
	xx <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) #
	yy<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], xx) #
	ic50 <- ML[[i]]$par[2]	#
	ploty <- data[[i]]$x#
	ploty[ploty < 0] <-0#
	yhalo <- (yy[which.max(yy> yy[length(yy)] * percentileLow)]+min(data[[i]]$x))#
	xhalo <- exp(xx[which.max(yy> yy[length(yy)] * 0.9)])		#
	x50 <- exp(xx[which.max(yy> yy[length(yy)] * 0.5)])			#
	minHalo <- exp(xx[which.max(yy> yy[length(yy)] * percentileLow)])		#
	ZOI <- xhalo		#
	slope <- ML[[i]]$par[3]#
	if(slope > 1){		#
			 xx <- seq(maxDist-1, maxDist, length=10)#
			yy<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], log(xx)) #
			yy <- (yy+min(data[[i]]$x))#
			yy <- (yy+min(data[[i]]$x))*ZOIcor[i]#
			id <- order(xx)#
			maxAUC <- sum(diff(xx[id])*rollmean(yy[id], 2))	#
		xx <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) 	#
		xx50 <- exp(xx[1:which.max(exp(xx) > x50)-1])		#
#		xx50 <- exp(xx[1:which.max(exp(xx) > exp(ic50))-1])		#
		xx90 <- exp(xx[1:which.max(exp(xx) > xhalo)-1])				#
#		xx <- exp(xx[1:which.max(exp(xx) > xhalo)-1])#
		if(length(xx50) == 0){#
			xx50 <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) #
			}			#
		yy50<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], log(xx50)) #
		yy90<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], log(xx90)) #
#		yy <- (yy+min(data[[i]]$x))*ZOIcor[i]#
		yy50 <- (yy50+min(data[[i]]$x))#
		yy90 <- (yy90+min(data[[i]]$x))	#
		yy50[yy50  < 0] <-0#
		yy50[yy50 ==NaN] <- 0#
		yy90[yy90  < 0] <-0#
		yy90[yy90 ==NaN] <- 0#
		id50 <- order(xx50)#
		id90 <- order(xx90)#
		if (length(xx50) > 1){#
			AUC50 <- sum(diff(xx50[id50])*rollmean(yy50[id50], 2))		#
			}#
		else{#
			AUC50 <- 0#
			}#
		if (length(xx90) > 1){#
			AUC90 <- sum(diff(xx90[id90])*rollmean(yy90[id90], 2))		#
			}#
		else{#
			AUC90 <- 0#
			}#
		return(list(ZOI = ZOI, minHalo = minHalo, AUC50= AUC50, AUC90 = AUC90, maxAUC = maxAUC))	#
		}#
	if(slope < 1){#
		minHalo <- 0#
		ZOI <- 0#
		yy <- (yy+min(data[[i]]$x))*ZOIcor[i]#
		yy[yy < 0] <- 0#
		xx <- exp(xx)#
		id <- order(xx)#
		AUC <- sum(diff(xx[id])*rollmean(yy[id], 2))#
		maxAUC <- 1#
	}#
	return(list(ZOI = ZOI, minHalo = minHalo, AUC= AUC, maxAUC = maxAUC))		#
}
findAUC <- function(data, ML, ML2, stand, clearHaloStand, ZOIcor, dotedge = 3.4, maxDist = 35, ymax = 200, standardLoc = 2.5, percentileLow = 0.2,  i){	#
	startX <- which(data[[i]][,1] > dotedge+0.5)[1]#
	stopX <- which(data[[i]][,1] > maxDist - 0.5)[1]#
	data[[i]] <- data[[i]][startX:stopX, 1:2]#
	data[[i]]$x <- data[[i]]$x + stand[i] - clearHaloStand #
	data[[i]]$distance <- data[[i]]$distance - (dotedge+0.5)#
	xx <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) #
	yy<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], xx) #
	ic50 <- ML[[i]]$par[2]	#
	ploty <- data[[i]]$x#
	ploty[ploty < 0] <-0#
	yhalo <- (yy[which.max(yy> yy[length(yy)] * percentileLow)]+min(data[[i]]$x))#
	xhalo <- exp(xx[which.max(yy> yy[length(yy)] * 0.9)])	#
	x50 <- exp(xx[which.max(yy> yy[length(yy)] * 0.5)])						#
	minHalo <- exp(xx[which.max(yy> yy[length(yy)] * percentileLow)])		#
	ZOI <- xhalo	#
	slope <- ML[[i]]$par[3]#
	if(slope > 1){		#
			 xx <- seq(maxDist-1, maxDist, length=10)#
			yy<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], log(xx)) #
			yy <- (yy+min(data[[i]]$x))#
			yy <- (yy+min(data[[i]]$x))*ZOIcor[i]#
			id <- order(xx)#
			maxAUC <- sum(diff(xx[id])*rollmean(yy[id], 2))	#
		xx <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) 	#
		xx50 <- exp(xx[1:which.max(exp(xx) > x50)-1])		#
		xx90 <- exp(xx[1:which.max(exp(xx) > xhalo)-1])#
		if(length(xx50) == 0){#
			xx50 <- seq(log(data[[i]]$distance[1]), log(max(data[[i]][,1])), length=200) #
			}#
		yy50<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], log(xx50)) #
		yy90<- curve2(ML2[[i]]$par[1], ML2[[i]]$par[2], ML2[[i]]$par[3], ML2[[i]]$par[5], ML2[[i]]$par[6], ML2[[i]]$par[7], log(xx90)) #
#
		yy50 <- (yy50+min(data[[i]]$x))#
		yy50[yy50  < 0] <-0#
		yy50[yy50 ==NaN] <- 0#
		id50 <- order(xx50)#
		if (length(xx50) > 1){#
			AUC50 <- sum(diff(xx50[id50])*rollmean(yy50[id50], 2))		#
			}#
		else{#
			AUC50 <- 0#
			}#
#
		yy90 <- (yy90+min(data[[i]]$x))#
		yy90[yy90  < 0] <-0#
		yy90[yy90 ==NaN] <- 0#
		id90 <- order(xx90)#
		if (length(xx90) > 1){#
			AUC90 <- sum(diff(xx90[id90])*rollmean(yy90[id90], 2))		#
			}#
		else{#
			AUC90 <- 0#
			}#
#
		return(list(ZOI = ZOI, minHalo = minHalo, AUC50= AUC90, AUC50= AUC90, maxAUC = maxAUC))	#
		}#
	if(slope < 1){#
		minHalo <- 0#
		ZOI <- 0#
		yy <- (yy+min(data[[i]]$x))*ZOIcor[i]#
		yy[yy < 0] <- 0#
		xx <- exp(xx)#
		id <- order(xx)#
		AUC <- sum(diff(xx[id])*rollmean(yy[id], 2))#
		AUC50 <- AUC  #Not sure this is what should be done, stopgap#
		AUC90 <- AUC  #Not sure this is what should be done, stopgap #
		maxAUC <- 1#
	}#
	return(list(ZOI = ZOI, minHalo = minHalo, AUC50= AUC50, AUC90 = AUC90, maxAUC = maxAUC))		#
}
d <- read.csv("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/excel/CarlOverviewMIC.csv", sep=",")#
ddn <- split(d, d$Strain)#
#
plotEE <- function(strain, name="", plotX = FALSE){#
	plot(ddn[[strain]]$Day, log(ddn[[strain]]$FLC.level), type="n", xaxt="n", yaxt="n", ylab="", xlab="", cex=1.5, ylim=c(log(0.5), log(300)))#
	axis(1, labels=FALSE)#
		for (i in ddn[[strain]]$Line){#
			sub <- subset(ddn[[strain]], Line ==i)#
			text(sub$Day[length(sub$Day)], log(sub$FLC.level)[length(sub$Day)], "X", col="red",  cex=1.5, font=2) #
			points(sub$Day, log(sub$FLC.level), type="b")#
			}#
	if(plotX) axis(1)#
	axis(2, las=2, labels=c("0.5", "2", "8", "32", "128"), at=c(log(0.5), log(2), log(8), log(32), log(128)))#
	mtext(name, side=3, adj=0.01, font=2)#
}#
#
FHT <- c(2, 10, 2, 7, 11, 10)#
SCT <- c(14, 5, 8, 14, 4, 9)#
T1 <- c(8, 5, 11, 9, 1, 14)
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/transferResultsDemo.pdf", width=6, height=5)#
plotEE(1, "Strain A", plotX = TRUE)#
mtext("Day of transfer", side=1, line=2.5)#
mtext(expression(paste("Fluconazole concentration (", mu, "g/mL)", sep="")), side=2, line=2.5, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/transferResultsDemo.pdf")
d <- read.csv("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/excel/CarlOverviewMIC.csv", sep=",")#
ddn <- split(d, d$Strain)#
#
plotEE <- function(strain, name="", plotX = FALSE){#
	plot(ddn[[strain]]$Day, log(ddn[[strain]]$FLC.level), type="n", xaxt="n", yaxt="n", ylab="", xlab="", cex=1.5, ylim=c(log(0.5), log(300)))#
	axis(1, labels=FALSE)#
		for (i in ddn[[strain]]$Line){#
			sub <- subset(ddn[[strain]], Line ==i)#
			text(sub$Day[length(sub$Day)], log(sub$FLC.level)[length(sub$Day)], "X", col="red",  cex=1.5, font=2) #
			points(sub$Day, log(sub$FLC.level), type="b")#
			}#
	if(plotX) axis(1)#
	axis(2, las=2, labels=c("0.5", "2", "8", "32", "128"), at=c(log(0.5), log(2), log(8), log(32), log(128)))#
	mtext(name, side=3, adj=0.01, font=2)#
}#
#
FHT <- c(2, 10, 2, 7, 11, 10)#
SCT <- c(14, 5, 8, 14, 4, 9)#
T1 <- c(8, 5, 11, 9, 1, 14)#
#
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/transferResultsDemo.pdf", width=6, height=5)#
plotEE(1, "Strain A", plotX = TRUE)#
mtext("Day of transfer", side=1, line=2.5)#
mtext(expression(paste("Fluconazole concentration (", mu, "g/mL)", sep="")), side=2, line=2.5, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/transferResultsDemo.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/transferResults.pdf", width=6, height=4.5)#
par(mfrow=c(3, 1), mar=c(1,1,2,1), oma=c(4, 4, 1, 1))#
plotEE(1, "Strain A")#
plotEE(2, "Strain B")#
plotEE(3,  "Strain C", plotX=TRUE)#
mtext("Day of transfer", side=1, line=2.5)#
mtext(expression(paste("Fluconazole concentration (", mu, "g/mL)", sep="")), side=2, line=1.5, outer=TRUE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/transferResults.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf", width=6, height=5)#
plotMIC(1, "Strain A", plotX = TRUE)#
abline(h=log(2), lty=2)#
mtext("MIC (fitness)", side=2, line=3, outer=FALSE)#
mtext(expression(paste("Fluconazole concentration in medium (", mu, "g/mL)", sep="")), side=1, line=3, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf")
plotMIC <- function(strain, name, plotX = FALSE, plotY = TRUE){#
	plot(log(ddn[[strain]]$FLC.level), log(ddn[[strain]]$MIC1), type="n", xaxt="n", yaxt="n", ylab="", xlab="", cex=1.5, ylim=c(log(0.1), log(280)), xlim=c(log(0.5), log(160)))#
	axis(1, las=2, labels=FALSE, at=c(log(0.5), log(2), log(8), log(32), log(128)))#
		for (i in ddn[[strain]]$Line){#
			sub <- subset(ddn[[strain]], Line ==i)#
#			text(log(sub$FLC.level)[length(sub$MIC1)], log(sub$MIC1)[length(sub$MIC1)], "o", col="red",  cex=1.5, font=2) #
			points(log(sub$FLC.level), log(sub$MIC1), type="b")#
			}#
	if(plotY) axis(2, las=2, labels=c("0.125", "0.5", "2", "8", "32", "128", ">256"), at=c(log(0.125), log(0.5), log(2), log(8), log(32), log(128), log(275)))#
	if(plotX) axis(1, labels=c("0.5", "2", "8", "32", "128"), at=c(log(0.5), log(2), log(8), log(32), log(128)))#
	mtext(name, side=3, adj=0.01, font=2)	#
}#
#
sub2 <- sub <- subset(ddn[[1]], Line ==2)
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf", width=6, height=5)#
plotMIC(1, "Strain A", plotX = TRUE)#
abline(h=log(2), lty=2)#
mtext("MIC (fitness)", side=2, line=3, outer=FALSE)#
mtext(expression(paste("Fluconazole concentration in medium (", mu, "g/mL)", sep="")), side=1, line=3, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsFH-2.pdf", width=6, height=4)#
plot(log(sub2$FLC.level), log(sub2$MIC1), type="b", xaxt="n", yaxt="n", ylab="", xlab="", cex=1.5, ylim=c(log(0.25), log(280)), xlim=c(log(2), log(160)))#
axis(2, las=2, labels=c("0.125", "0.5", "2", "8", "32", "128", "256"), at=c(log(0.125), log(0.5), log(2), log(8), log(32), log(128), log(256)))#
axis(1, labels=c("0.5", "2", "8", "32", "128"), at=c(log(0.5), log(2), log(8), log(32), log(128)))#
mtext("MIC (fitness)", side=2, line=3, outer=FALSE)#
mtext(expression(paste("Fluconazole concentration in medium (", mu, "g/mL)", sep="")), side=1, line=3, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsFH-2.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf", width=6, height=5)#
plotMIC(1, "Strain A", plotX = TRUE)#
abline(h=log(2), lty=2)#
mtext("MIC (fitness)", side=2, line=3, outer=FALSE)#
mtext(expression(paste("Fluconazole concentration in medium (", mu, "g/mL)", sep="")), side=1, line=3, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf")#
#
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResults.pdf", width=6, height=4.75)#
par(mfrow=c(3, 1), mar=c(1,1,1,1), oma=c(4, 4, 1, 1))#
plotMIC(1, "Strain A")#
abline(h=log(2), lty=2)#
plotMIC(2, "Strain B")#
points(c(log(16), log(64)), c(log(5), log(96)), type="l", lty=2)#
points(c(log(2), log(8)), c(log(0.19), log(0.16)), type="l", lty=2)#
abline(h=log(0.5), lty=2)#
plotMIC(3, "Strain C", plotX=TRUE)#
abline(h=log(0.5), lty=2)#
mtext("MIC (fitness)", side=2, line=2.5, outer=TRUE)#
mtext(expression(paste("Fluconazole concentration (", mu, "g/mL)", sep="")), side=1, line=2, outer=TRUE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResults.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResults.pdf", width=6, height=4.75)#
par(mfrow=c(3, 1), mar=c(1,1,1,1), oma=c(4, 4, 1, 1))#
plotMIC(1, "Strain A")#
abline(h=log(4), lty=2)#
plotMIC(2, "Strain B")#
points(c(log(16), log(64)), c(log(5), log(96)), type="l", lty=2)#
points(c(log(2), log(8)), c(log(0.19), log(0.16)), type="l", lty=2)#
abline(h=log(0.5), lty=2)#
plotMIC(3, "Strain C", plotX=TRUE)#
abline(h=log(0.5), lty=2)#
mtext("MIC (fitness)", side=2, line=2.5, outer=TRUE)#
mtext(expression(paste("Fluconazole concentration (", mu, "g/mL)", sep="")), side=1, line=2, outer=TRUE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResults.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf", width=6, height=5)#
plotMIC(1, "Strain A", plotX = TRUE)#
abline(h=log(4), lty=2)#
mtext("MIC (fitness)", side=2, line=3, outer=FALSE)#
mtext(expression(paste("Fluconazole concentration in medium (", mu, "g/mL)", sep="")), side=1, line=3, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsDemo.pdf")
pdf("/Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsFH-2.pdf", width=6, height=4)#
plot(log(sub2$FLC.level), log(sub2$MIC1), type="b", xaxt="n", yaxt="n", ylab="", xlab="", cex=1.5, ylim=c(log(0.25), log(280)), xlim=c(log(4), log(160)))#
axis(2, las=2, labels=c("0.125", "0.5", "2", "8", "32", "128", "256"), at=c(log(0.125), log(0.5), log(2), log(8), log(32), log(128), log(256)))#
axis(1, labels=c("0.5", "2", "8", "32", "128"), at=c(log(0.5), log(2), log(8), log(32), log(128)))#
mtext("MIC (fitness)", side=2, line=3, outer=FALSE)#
mtext(expression(paste("Fluconazole concentration in medium (", mu, "g/mL)", sep="")), side=1, line=3, outer=FALSE)#
dev.off()#
system("open /Users/acgerstein/Documents/Postdoc/Research/Clinical_isolates/Carl/figures/MICResultsFH-2.pdf")
?diff
load("/Users/acgerstein/Documents/Postdoc/Things from:for others/UMN/Ben/test.RData")
.RData
library(devtools)
install_github("acgerstein/diskImageR")
library("diskImageR")
library(rmarkdown)#
library(knitr)
setwd("~/Documents/Postdoc/Research")
setwd("diskImageR/vignettes/")
setwd("~/Documents/Postdoc/Research")
devtools:check()
devtools::check()
setwd("diskImageR/")
devtools::check()
devtools::build_vignettes()
dir()
devtools::build_vignettes()
manyReps <- read.csv("data/manyReps_df.csv")
manyReps
?system.file
devtools::build_vignettes()
manyReps <- system.file('data', 'manyReps.csv', package = 'mypackage')
manyReps
manyReps <- system.file("data", "manyReps.csv", package = "diskImageR")
manyReps
manyReps <- system.file("manyReps.csv", "data", package = "diskImageR")
manyReps
system.fil()
system.file()
system.file(package="diskImageR")
manyReps <- system.file("../data", "manyReps.csv", package = "diskImageR")
manyReps
library(diskImageR(
)
library(diskImageR)
system.file(package="diskImageR")
system.file("..", package="diskImageR")
system.file("../data/", package="diskImageR")
dir(system.file("../data/", package="diskImageR"))
system.file("../data/", manyReps_df.csv, package="diskImageR"))
system.file("../data/", manyReps_df.csv, package="diskImageR")
system.file("../data/", "manyReps_df.csv", package="diskImageR")
devtools::build_vignettes()
system.file(package="diskImageR")
dir(system.file(package="diskImageR"))
dir(system.file("..", package="diskImageR"))
dir(system.file("../vignettes/", package="diskImageR"))
dir(system.file("../vignettes/pictures/", package="diskImageR"))
devtools::build_vignettes()
system.file("../vignettes/", package="diskImageR")
dir(system.file("../vignettes/", package="diskImageR"))
dir(system.file("../vignettes/pictures/", package="diskImageR"))
devtools::build_vignettes()
?system.fil
?system.file
?system.dir
??system.dir
??system directory
?system.file
system.file("diskImageR")
system.file(package="diskImageR")
paste(system.file("../vignettes/pictures", package="diskImageR"), "/", sep="")
devtools::build_vignettes()
manyReps <- system.file("../data/", "manyReps_df.csv", package="diskImageR")
manyReps
manyReps <- read.csv(system.file("../data/", "manyReps_df.csv", package="diskImageR"))
manyReps
devtools::build_vignettes()
devtools::check("diskImageR")
devtools::check()
system.file(package="diskImageR")
dir(system.file(package="diskImageR"))
dir(system.file("pictures", package="diskImageR"))
devtools::check()
file.path(system.file("inst", package="diskImageR"),"pictures", "")
devtools::check()
?plotRaw
devtools::check()
check()
render("DiskAssay.rmd", html_vignette(toc=TRUE, fig_width = 6, fig_height = 3))
dir()
setwd("..")
render("DiskAssay.rmd", html_vignette(toc=TRUE, fig_width = 6, fig_height = 3))
setwd("diskImageR/inst/doc/")
dir()
render("DiskAssay.rmd", html_vignette(toc=TRUE, fig_width = 6, fig_height = 3))
setwd("../../vignettes/")
render("DiskAssay.rmd", html_vignette(toc=TRUE, fig_width = 6, fig_height = 3))
install.packages("devtools")
library(devtools)
install_github("acgerstein/diskImageR", build_vignettes = FALSE)
library(diskImageR)
IJMacro("projectName")
IJMacro("test", projectDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/", pictureDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
choose.dir()
?chooseDir
choose.file()
choose.file
?choose.file
??choose.file
tk_choose.file()
?tk_choose.file
getwd()
IJMacro("test", projectDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/", pictureDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures")
IJMacro("test", projectDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", pictureDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures")
IJMacro("test", projectDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", pictureDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures")
IJMacro("test", projectDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", pictureDir = "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
?IJMacro
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
IJMacro <-#
function(projectName, projectDir=NA, pictureDir=NA, imageJLoc="loc2", diskDiam = 6, manual=TRUE){#
	# if(!is.char(projectName))#
	fileDir <- projectName#
	if(is.na(projectDir)){#
		projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
	}		#
	if(is.na(pictureDir)){#
		pictureDir <- tcltk::tk_choose.dir(caption = "Select location of photographs")#
		pictureDirOrig <- pictureDir#
		pictureDir <- file.path(pictureDir, "")#
		if (projectDir == pictureDirOrig) {#
			cat("The photograph directory can not be used for the main project directory. Please select a different folder for the main project directory.")#
			projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
		}#
#
	}#
	setwd(pictureDir)#
	if (TRUE %in% file.info(dir())[,2]) {#
		stop("There is a folder located in your photograph directory. Please remove before continuing.")#
		}#
	dir.create(file.path(projectDir, "imageJ_out"), showWarnings=FALSE)#
	outputDir <- file.path(projectDir, "imageJ_out", fileDir, "")#
	IJarguments <- paste(pictureDir, outputDir, diskDiam, sep="*")	#
#
	if(length(dir(outputDir)) > 0){#
		cont <- readline(paste("Output files exist in directory ", outputDir, "\nOverwrite? (y/n) ", sep=""))#
		if(cont=="n"){#
			stop("Please delete existing files or change project name before continuing.")#
			}#
		if(cont=="y"){#
			unlink(outputDir, recursive = TRUE)#
		}#
	}#
	dir.create(file.path(outputDir), showWarnings= FALSE)#
	dir.create(file.path(projectDir, "figures"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "figures", fileDir), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files", fileDir), showWarnings=FALSE)	#
	script <- file.path(.libPaths(), "diskImageR", "IJ_diskImageR.ijm")[1]			#
	if(.Platform$OS.type=="windows"){#
		IJarguments <- paste(paste(pictureDir,  "", sep="\\"), paste(outputDir, "", sep="\\"), diskDiam, sep="*")		#
		script <- gsub("Program Files", "progra~1", script)#
	  cmd <- "C:\\progra~1\\ImageJ\\ImageJ.exe"#
		# cmd <- '"C:\\Program Files (x86)\\ImageJ\\ImageJ.exe"'#
		args <- paste("-batch", script, IJarguments)#
		args <- gsub("/", "\\\\", args)#
		shell(paste(cmd, args))#
	}#
	else{		#
		if (imageJLoc=="default" | imageJLoc=="loc2" ){#
			if (imageJLoc=="loc2"){#
				call <- paste("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
			if (imageJLoc=="default"){#
				call <- paste("/Applications/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
		}#
		else {call <- paste(imageJLoc,  "-batch", script, IJarguments, sep=" ")#
		}#
		system(call)#
	}#
	cat(paste("\nOutput of imageJ analyses saved in directory: ", outputDir, "\n", sep=""))#
	cat(paste("\nElements in dataframe ", projectName, ": \n", sep=""))	#
	temp <- .ReadIn_DirCreate(projectDir, outputDir, projectName)#
	if(!length(dir(pictureDir)) == length(temp)){#
		stop("Mismatch between the number of files in the photograph directory and the number of images analyzed. This likely indicates a non-photograph file is located in this directory. Please remove and rerun before continuing.")#
		}		#
	cat("\a")#
	assign(projectName, temp, envir=globalenv())#
	}#
#
.ReadIn_DirCreate <-#
function(workingDir, folderLoc, experAbbr){#
    setwd(workingDir)#
	tList <- list()#
	tList <- .readIn(folderLoc, tList, 30)#
	len <- c()#
		for (i in 1:length(tList)){#
		len[i] <- length(tList[[i]][,1])#
		}#
	temp <- data.frame(names = names(tList), len)#
	redo <- subset(temp, len==1, names)	#
	tList#
	}#
#
.readIn <-function(directoryPath, newList = list(), numDig=30) {#
	currDir <- getwd()#
	# print(currDir)#
	getData <- function(i, newList, names) {#
		if (i > length(dir())){#
			names(newList) <- names#
			print(names(newList))#
			setwd(currDir)#
			return (newList)#
			}#
		else {#
			allLines <-  aggregate(.load.data(dir()[i])$x,  .load.data(dir()[i])["distance"], mean)#
			newList[[length(newList)+1L]] <-  data.frame(distance = allLines[,1]*40/length(allLines[,1]), x= allLines[,2])#
			temp <- paste(substr(basename(dir()[i]),1,numDig), "", sep="")#
			names[i] <- strsplit(temp,".txt")[[1]][1]#
			getData(i+1, newList, names)#
		}#
	}#
	setwd(directoryPath)#
	i <-1#
	names <- c()#
	findMin <- c()#
	getData(i, newList, names)#
}#
#
.load.data <-#
function(filename) {#
	d <- read.csv(filename, header=TRUE, sep="\t")#
   names(d) <- c("count", "distance","x")#
   d#
 }
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
test
function(projectName, projectDir=NA, pictureDir=NA, imageJLoc="loc2", diskDiam = 6, manual=TRUE){#
	# if(!is.char(projectName))#
	fileDir <- projectName#
	if(is.na(projectDir)){#
		projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
	}		#
	if(is.na(pictureDir)){#
		pictureDir <- tcltk::tk_choose.dir(caption = "Select location of photographs")#
		pictureDirOrig <- pictureDir#
		pictureDir <- file.path(pictureDir, "")#
		if (projectDir == pictureDirOrig) {#
			cat("The photograph directory can not be used for the main project directory. Please select a different folder for the main project directory.")#
			projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
		}#
#
	}#
	setwd(pictureDir)#
	if (TRUE %in% file.info(dir())[,2]) {#
		stop("There is a folder located in your photograph directory. Please remove before continuing.")#
		}#
	dir.create(file.path(projectDir, "imageJ_out"), showWarnings=FALSE)#
	outputDir <- file.path(projectDir, "imageJ_out", fileDir, "")#
	IJarguments <- paste(pictureDir, outputDir, diskDiam, sep="*")	#
#
	if(length(dir(outputDir)) > 0){#
		cont <- readline(paste("Output files exist in directory ", outputDir, "\nOverwrite? (y/n) ", sep=""))#
		if(cont=="n"){#
			stop("Please delete existing files or change project name before continuing.")#
			}#
		if(cont=="y"){#
			unlink(outputDir, recursive = TRUE)#
		}#
	}#
	dir.create(file.path(outputDir), showWarnings= FALSE)#
	dir.create(file.path(projectDir, "figures"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "figures", fileDir), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files", fileDir), showWarnings=FALSE)	#
	script <- file.path(.libPaths(), "diskImageR", "IJ_diskImageR.ijm")[1]			#
	if(.Platform$OS.type=="windows"){#
		IJarguments <- paste(paste(pictureDir,  "", sep="\\"), paste(outputDir, "", sep="\\"), diskDiam, sep="*")		#
		script <- gsub("Program Files", "progra~1", script)#
	  cmd <- "C:\\progra~1\\ImageJ\\ImageJ.exe"#
		# cmd <- '"C:\\Program Files (x86)\\ImageJ\\ImageJ.exe"'#
		args <- paste("-batch", script, IJarguments)#
		args <- gsub("/", "\\\\", args)#
		shell(paste(cmd, args))#
	}#
	else{		#
		if (imageJLoc=="default" | imageJLoc=="loc2" ){#
			if (imageJLoc=="loc2"){#
				call <- paste("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
			if (imageJLoc=="default"){#
				call <- paste("/Applications/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
		}#
		else {call <- paste(imageJLoc,  "-batch", script, IJarguments, sep=" ")#
		}#
		system(call)#
	}#
	cat(paste("\nOutput of imageJ analyses saved in directory: ", outputDir, "\n", sep=""))#
	cat(paste("\nElements in list '", projectName, "': \n", sep=""))	#
	temp <- .ReadIn_DirCreate(projectDir, outputDir, projectName)#
	if(!length(dir(pictureDir)) == length(temp)){#
		stop("Mismatch between the number of files in the photograph directory and the number of images analyzed. This likely indicates a non-photograph file is located in this directory. Please remove and rerun before continuing.")#
		}		#
	cat("\a")#
	assign(projectName, temp, envir=globalenv())#
	}
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
IJMacro <-#
function(projectName, projectDir=NA, pictureDir=NA, imageJLoc="loc2", diskDiam = 6, manual=TRUE){#
	# if(!is.char(projectName))#
	fileDir <- projectName#
	if(is.na(projectDir)){#
		projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
	}		#
	if(is.na(pictureDir)){#
		pictureDir <- tcltk::tk_choose.dir(caption = "Select location of photographs")#
		pictureDirOrig <- pictureDir#
		pictureDir <- file.path(pictureDir, "")#
		if (projectDir == pictureDirOrig) {#
			cat("The photograph directory can not be used for the main project directory. Please select a different folder for the main project directory.")#
			projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
		}#
#
	}#
	setwd(pictureDir)#
	if (TRUE %in% file.info(dir())[,2]) {#
		stop("There is a folder located in your photograph directory. Please remove before continuing.")#
		}#
	dir.create(file.path(projectDir, "imageJ_out"), showWarnings=FALSE)#
	outputDir <- file.path(projectDir, "imageJ_out", fileDir, "")#
	IJarguments <- paste(pictureDir, outputDir, diskDiam, sep="*")	#
#
	if(length(dir(outputDir)) > 0){#
		cont <- readline(paste("Output files exist in directory ", outputDir, "\nOverwrite? (y/n) ", sep=""))#
		if(cont=="n"){#
			stop("Please delete existing files or change project name before continuing.")#
			}#
		if(cont=="y"){#
			unlink(outputDir, recursive = TRUE)#
		}#
	}#
	dir.create(file.path(outputDir), showWarnings= FALSE)#
	dir.create(file.path(projectDir, "figures"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "figures", fileDir), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files", fileDir), showWarnings=FALSE)	#
	script <- file.path(.libPaths(), "diskImageR", "IJ_diskImageR.ijm")[1]			#
	if(.Platform$OS.type=="windows"){#
		IJarguments <- paste(paste(pictureDir,  "", sep="\\"), paste(outputDir, "", sep="\\"), diskDiam, sep="*")		#
		script <- gsub("Program Files", "progra~1", script)#
	  cmd <- "C:\\progra~1\\ImageJ\\ImageJ.exe"#
		# cmd <- '"C:\\Program Files (x86)\\ImageJ\\ImageJ.exe"'#
		args <- paste("-batch", script, IJarguments)#
		args <- gsub("/", "\\\\", args)#
		shell(paste(cmd, args))#
	}#
	else{		#
		if (imageJLoc=="default" | imageJLoc=="loc2" ){#
			if (imageJLoc=="loc2"){#
				call <- paste("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
			if (imageJLoc=="default"){#
				call <- paste("/Applications/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
		}#
		else {call <- paste(imageJLoc,  "-batch", script, IJarguments, sep=" ")#
		}#
		system(call)#
	}#
	cat(paste("\nOutput of imageJ analyses saved in directory: ", outputDir, "\n", sep=""))#
	cat(paste("\nElements in list '", projectName, "': \n", sep=""))	#
	temp <- .ReadIn_DirCreate(projectDir, outputDir, projectName)#
	if(!length(dir(pictureDir)) == length(temp)){#
		stop("Mismatch between the number of files in the photograph directory and the number of images analyzed. This likely indicates a non-photograph file is located in this directory. Please remove and rerun before continuing.")#
		}		#
	cat("\a")#
	assign(projectName, temp, envir=globalenv())#
	}
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
IJMacro <-#
function(projectName, projectDir=NA, pictureDir=NA, imageJLoc="loc2", diskDiam = 6, manual=TRUE){#
	# if(!is.char(projectName))#
	fileDir <- projectName#
	if(is.na(projectDir)){#
		projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
	}		#
	if(is.na(pictureDir)){#
		pictureDir <- tcltk::tk_choose.dir(caption = "Select location of photographs")#
		pictureDirOrig <- pictureDir#
		pictureDir <- file.path(pictureDir, "")#
		if (projectDir == pictureDirOrig) {#
			cat("The photograph directory can not be used for the main project directory. Please select a different folder for the main project directory.")#
			projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
		}#
#
	}#
	setwd(pictureDir)#
	if (TRUE %in% file.info(dir())[,2]) {#
		stop("There is a folder located in your photograph directory. Please remove before continuing.")#
		}#
	dir.create(file.path(projectDir, "imageJ_out"), showWarnings=FALSE)#
	outputDir <- file.path(projectDir, "imageJ_out", fileDir, "")#
	IJarguments <- paste(pictureDir, outputDir, diskDiam, sep="*")	#
#
	if(length(dir(outputDir)) > 0){#
		cont <- readline(paste("Output files exist in directory ", outputDir, "\nOverwrite? (y/n) ", sep=""))#
		if(cont=="n"){#
			stop("Please delete existing files or change project name before continuing.")#
			}#
		if(cont=="y"){#
			unlink(outputDir, recursive = TRUE)#
		}#
	}#
	dir.create(file.path(outputDir), showWarnings= FALSE)#
	dir.create(file.path(projectDir, "figures"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "figures", fileDir), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files", fileDir), showWarnings=FALSE)	#
	script <- file.path(.libPaths(), "diskImageR", "IJ_diskImageR.ijm")[1]			#
	if(.Platform$OS.type=="windows"){#
		IJarguments <- paste(paste(pictureDir,  "", sep="\\"), paste(outputDir, "", sep="\\"), diskDiam, sep="*")		#
		script <- gsub("Program Files", "progra~1", script)#
	  cmd <- "C:\\progra~1\\ImageJ\\ImageJ.exe"#
		# cmd <- '"C:\\Program Files (x86)\\ImageJ\\ImageJ.exe"'#
		args <- paste("-batch", script, IJarguments)#
		args <- gsub("/", "\\\\", args)#
		shell(paste(cmd, args))#
	}#
	else{		#
		if (imageJLoc=="default" | imageJLoc=="loc2" ){#
			if (imageJLoc=="loc2"){#
				call <- paste("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
			if (imageJLoc=="default"){#
				call <- paste("/Applications/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
		}#
		else {call <- paste(imageJLoc,  "-batch", script, IJarguments, sep=" ")#
		}#
		system(call)#
	}#
	cat(paste("\nOutput of imageJ analyses saved in directory: \n", outputDir, "\n", sep=""))#
	cat(paste("\nElements in list '", projectName, "': \n", sep=""))	#
	temp <- .ReadIn_DirCreate(projectDir, outputDir, projectName)#
	if(!length(dir(pictureDir)) == length(temp)){#
		stop("Mismatch between the number of files in the photograph directory and the number of images analyzed. This likely indicates a non-photograph file is located in this directory. Please remove and rerun before continuing.")#
		}		#
	cat("\a")#
	assign(projectName, temp, envir=globalenv())#
	}
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
IJMacro <-#
function(projectName, projectDir=NA, photoDir=NA, imageJLoc="loc2", diskDiam = 6, manual=TRUE){#
	# if(!is.char(projectName))#
	fileDir <- projectName#
	if(is.na(projectDir)){#
		projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
	}		#
	if(is.na(photoDir)){#
		photoDir <- tcltk::tk_choose.dir(caption = "Select location of photographs")#
		photoDirOrig <- photoDir#
		photoDir <- file.path(photoDir, "")#
		if (projectDir == photoDirOrig) {#
			cat("The photograph directory can not be used for the main project directory. Please select a different folder for the main project directory.")#
			projectDir <- tcltk::tk_choose.dir(caption = "Select main project directory") #
		}#
#
	}#
	setwd(photoDir)#
	if (TRUE %in% file.info(dir())[,2]) {#
		stop("There is a folder located in your photograph directory. Please remove before continuing.")#
		}#
	dir.create(file.path(projectDir, "imageJ_out"), showWarnings=FALSE)#
	outputDir <- file.path(projectDir, "imageJ_out", fileDir, "")#
	IJarguments <- paste(photoDir, outputDir, diskDiam, sep="*")	#
#
	if(length(dir(outputDir)) > 0){#
		cont <- readline(paste("Output files exist in directory ", outputDir, "\nOverwrite? (y/n) ", sep=""))#
		if(cont=="n"){#
			stop("Please delete existing files or change project name before continuing.")#
			}#
		if(cont=="y"){#
			unlink(outputDir, recursive = TRUE)#
		}#
	}#
	dir.create(file.path(outputDir), showWarnings= FALSE)#
	dir.create(file.path(projectDir, "figures"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "figures", fileDir), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files"), showWarnings=FALSE)#
	dir.create(file.path(projectDir, "parameter_files", fileDir), showWarnings=FALSE)	#
	script <- file.path(.libPaths(), "diskImageR", "IJ_diskImageR.ijm")[1]			#
	if(.Platform$OS.type=="windows"){#
		IJarguments <- paste(paste(photoDir,  "", sep="\\"), paste(outputDir, "", sep="\\"), diskDiam, sep="*")		#
		script <- gsub("Program Files", "progra~1", script)#
	  cmd <- "C:\\progra~1\\ImageJ\\ImageJ.exe"#
		# cmd <- '"C:\\Program Files (x86)\\ImageJ\\ImageJ.exe"'#
		args <- paste("-batch", script, IJarguments)#
		args <- gsub("/", "\\\\", args)#
		shell(paste(cmd, args))#
	}#
	else{		#
		if (imageJLoc=="default" | imageJLoc=="loc2" ){#
			if (imageJLoc=="loc2"){#
				call <- paste("/Applications/ImageJ/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
			if (imageJLoc=="default"){#
				call <- paste("/Applications/ImageJ.app/Contents/MacOS/JavaApplicationStub -batch", script, IJarguments, sep=" ")}#
		}#
		else {call <- paste(imageJLoc,  "-batch", script, IJarguments, sep=" ")#
		}#
		system(call)#
	}#
	cat(paste("\nOutput of imageJ analyses saved in directory: \n", outputDir, "\n", sep=""))#
	cat(paste("\nElements in list '", projectName, "': \n", sep=""))	#
	temp <- .ReadIn_DirCreate(projectDir, outputDir, projectName)#
	if(!length(dir(photoDir)) == length(temp)){#
		stop("Mismatch between the number of files in the photograph directory and the number of images analyzed. This likely indicates a non-photograph file is located in this directory. Please remove and rerun before continuing.")#
		}		#
	cat("\a")#
	assign(projectName, temp, envir=globalenv())#
	}#
#
.ReadIn_DirCreate <-#
function(workingDir, folderLoc, experAbbr){#
    setwd(workingDir)#
	tList <- list()#
	tList <- .readIn(folderLoc, tList, 30)#
	len <- c()#
		for (i in 1:length(tList)){#
		len[i] <- length(tList[[i]][,1])#
		}#
	temp <- data.frame(names = names(tList), len)#
	redo <- subset(temp, len==1, names)	#
	tList#
	}#
#
.readIn <-function(directoryPath, newList = list(), numDig=30) {#
	currDir <- getwd()#
	# print(currDir)#
	getData <- function(i, newList, names) {#
		if (i > length(dir())){#
			names(newList) <- names#
			print(names(newList))#
			setwd(currDir)#
			return (newList)#
			}#
		else {#
			allLines <-  aggregate(.load.data(dir()[i])$x,  .load.data(dir()[i])["distance"], mean)#
			newList[[length(newList)+1L]] <-  data.frame(distance = allLines[,1]*40/length(allLines[,1]), x= allLines[,2])#
			temp <- paste(substr(basename(dir()[i]),1,numDig), "", sep="")#
			names[i] <- strsplit(temp,".txt")[[1]][1]#
			getData(i+1, newList, names)#
		}#
	}#
	setwd(directoryPath)#
	i <-1#
	names <- c()#
	findMin <- c()#
	getData(i, newList, names)#
}#
#
.load.data <-#
function(filename) {#
	d <- read.csv(filename, header=TRUE, sep="\t")#
   names(d) <- c("count", "distance","x")#
   d#
 }
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
IJMacro("test",  "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra", "/Users/acgerstein/Documents/Postdoc/Research/diskImageRextra/pictures/")
?imageJ
?IJMacro
?plotRaw
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
?plotRaw
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
library(devtools)
install_github("acgerstein/diskImageR", build_vignettes = FALSE)
library(diskImageR)
IJMacro("projectName")
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
?maxLik
?diskImageR
?IJMacro
library(devtools)#
#
#install the diskImageR package#
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
library(diskImageR)
?IJMacro
IJMacro(
)
install_github("acgerstein/diskImageR", build_vignettes = FALSE)
?maxLik
library(diskImageR)
IJMacro("projectName")
plotRaw("projectName")
projectName
plotRaw("projectName")
plotRaw <- function(projectName, ymin = 0, ymax=250, xmin = 0, xmax = 40, xplots = 6, height =4, width = 8, cexPt = 0.6, cexX = 0.8, cexY = 0.8, nameVector = TRUE , plotStandardLoc=TRUE, showNum=FALSE, popUp = TRUE, overwrite=TRUE, savePDF= TRUE){#
	dir.create(paste("figures/", projectName,  sep=""), showWarnings = FALSE)#
	t <- file.path("figures", projectName,  paste(projectName, "_raw.pdf", sep=""))#
	if (!overwrite){#
		if (file.exists(t)){#
			t <- file.path("figures", projectName, paste(projectName, "_raw_2.pdf", sep=""))#
			if (file.exists(t)){#
				k <- 2#
				while(file.exists(t)){#
					k <- k+1#
					t <- file.path("figures", projectName, paste(projectName, "_raw_", k, ".pdf", sep=""))#
					}#
				}#
			}#
		}#
	data <- eval(parse(text=projectName))#
	standardLoc <- 2.5#
	dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
	standards <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))	#
	convert <- unlist(lapply(data, function(x) 40/length(x[,1])))#
	if (is.logical(nameVector)){#
		if (nameVector){label <- names(data)}		#
		else {label <- rep("", length(data))}#
		}#
	else {label <- nameVector}#
#
	if (xplots > length(data)){#
		xplots <- length(data)#
		}#
	if (ceiling(length(data)/xplots) < 6) {#
		yplots<- ceiling(length(data)/xplots)}#
	else {yplots<- 6}#
	numpages <- ceiling(length(data)/(xplots*yplots))#
	if(savePDF){#
		pdf(t, width=width, height=height)#
		}#
	# if(!savePDF){#
		# quartz(width=width, height=height)#
		# }#
	par(mfrow=c(yplots , xplots), mar=c(1,1,1,1), oma=c(4,5,1,1))#
	for (i in 1:length(data)){#
		.discplotNoRep(data[[i]], label[i], ymin=ymin, ymax=ymax, xmin=xmin, xmax=xmax, stand=standards[i], standardLoc = standardLoc, cexPt = cexPt, plotStandardLoc = plotStandardLoc)#
		if(numpages == 1){#
			if (i >= xplots*yplots-xplots+1){#
				axis(1, cex.axis=cexX, at=c(0, 10, 20, 30, 40), labels=c(0, 10, 20, 30, 40))#
			}#
		}#
		if(numpages == 2){#
			if (i >= xplots*yplots-xplots+1 & i < xplots*yplots+1){#
				axis(1, cex.axis=cexX, at=c(0, 10, 20, 30, 40), labels=c(0, 10, 20, 30, 40))#
			}#
			if (i >= 2*xplots*yplots-xplots+1){#
				axis(1, cex.axis=cexX, at=c(0, 10, 20, 30, 40), labels=c(0, 10, 20, 30, 40))#
			}#
		}				#
		if(numpages == 3){#
			if (i >= xplots*yplots-xplots+1 & i < xplots*yplots+1){#
				axis(1, cex.axis=cexX, at=c(0, 10, 20, 30, 40), labels=c(0, 10, 20, 30, 40))#
			}#
			if (i >= 2*xplots*yplots-xplots+1 & i < 2*xplots*yplots+1){#
				axis(1, cex.axis=cexX, at=c(0, 10, 20, 30, 40), labels=c(0, 10, 20, 30, 40))#
			}#
			if (i >= (length(data)-xplots)){#
				axis(1, cex.axis=cexX, at=c(0, 10, 20, 30, 40), labels=c(0, 10, 20, 30, 40))#
			}#
		}				#
		k <- 1#
		while (k <= numpages){#
		if (i %in% seq(1, k*yplots*xplots, by=xplots)) {axis(2, cex.axis=cexY, las=2)}#
			k <- k+1}#
		if(showNum){#
			text(xmax*0.95, xmax*0.95, i)#
		}#
	}#
	mtext("Distance from center of disk (mm)", side= 1, outer=TRUE, line=2)#
	mtext("Pixel intensity", side=2, outer=TRUE, line=2)#
	if(savePDF){#
		dev.off()#
		cat(paste("\tFigure saved: ", t, sep=""))#
		if(popUp){#
		tt <- paste("open ",t)#
		system(tt)#
	}#
	}#
	}#
#
.discplotNoRep <- function(data,  label=label, ymin=0, ymax=250, xmin=0, xmax=40, standardLoc = 2.5, cexPt = 0.6, stand = 0, xaxt="n", yaxt="n", plotStandardLoc =FALSE){#
	plot(data[,1], data[,2]+stand, ylim=c(ymin, ymax), xlim=c(xmin, xmax), xaxt=xaxt, yaxt="n", cex=cexPt, col="black")#
	if (yaxt=="s"){#
		axis(2, las=2)}#
	axis(1, labels=FALSE, at=c(0, 10, 20, 30, 40))#
	axis(2, labels=FALSE)#
	mtext(label, side=3, cex=0.6)#
	if(plotStandardLoc){#
		abline(v= standardLoc, lty=2, col="red")#
		}#
	}
projectName <- "projectName"
t <- file.path("figures", projectName,  paste(projectName, "_raw.pdf", sep=""))
data <- eval(parse(text=projectName))
data
projectName
projectName
"projectName"
IJMacro("projectName")
projectName
data <- eval(parse(text=projectName))
data
data <- eval(parse(text="projectName"))
data
standardLoc <- 2.5#
	dotMax <- max(sapply(data, function(x) {x[which(x[,1] > standardLoc)[1], 2]})) 		#
	standards <-c( sapply(data, function(x) {dotMax-x[which(x[,1] > standardLoc)[1], 2]}))
convert <- unlist(lapply(data, function(x) 40/length(x[,1])))
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
library(diskImageR)
?IJMacro
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
install_github("acgerstein/diskImageR", build_vignettes = TRUE)
library(diskImageR)
?plotRaw
?IJMacro
